#include "UTPTest.h"

using namespace tada::utp;
using namespace std;

CPPUNIT_TEST_SUITE_REGISTRATION (UTPTest);

void UTPTest::setUp(void)
{
	a = new UTP<double>(5); b = new UTP<double>(5); c = new UTP<double>(5);
	u = new UTP<double>(5); v = new UTP<double>(5);

    a->set(0, 1.3); a->set(1, -4); a->set(2, 2); a->set(3, 4); a->set(4, 3);
    b->set(0, -2.6); b->set(1, 3); b->set(2, 4); b->set(3, -3); b->set(4, -1);
    c->set(0, -.6); c->set(1, .3); c->set(2, .4); c->set(3, -.3); c->set(4, -.1);

    v->set(0, 0); v->set(1, 0); v->set(2, 0); v->set(3, 0); v->set(4, 0);
    u->set(0, 0); u->set(1, 0); u->set(2, 0); u->set(3, 0); u->set(4, 0);
}

void UTPTest::tearDown(void)
{
	delete a; delete b; delete c;
	delete u; delete v;
}

void UTPTest::expTest(void)
{
	UTP<double> u = exp((*a));
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[0],  3.6692966676192444);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -14.677186670476978);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[2],  36.692966676192441);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -53.816351125082242);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[4],  57.485647792701478);
}

void UTPTest::logTest(void)
{
	UTP<double> u = log((*a));
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[0],  0.26236426446749106);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -3.0769230769230766);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], -3.1952662721893486);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -1.8995600060688809);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[4],  2.7488533314659862);
}

void UTPTest::log10Test(void)
{
    UTP<double> u = log10((*a));
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[0],  0.1139433523068368);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -1.336290713548467 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], -1.3876865102234079);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -0.8249684286798225);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[4],  1.1938118334170482);
}

void UTPTest::sinTest(void)
{
    UTP<double> u = sin(*a);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], 0.963558185417193  );
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -1.0699953144983494);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], -7.1734678260883689);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], 11.6317816364981592);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], 20.290283801504458 );
}

void UTPTest::cosTest(void)
{
    UTP<double> u = cos(*a);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], 0.2674988286245873  );
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], 3.8542327416687718  );
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], -4.0671069998310845 );
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -11.9921960904554652);
	CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], 19.1245608498299973 );
}

void UTPTest::tanTest(void)
{
    UTP<double> u = tan(*a);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], 3.6021024479679786e+00 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -5.5900568182627616e+01);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], 8.3338857806508918e+02 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -1.2652759091072183e+04);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], 1.9228940263513214e+05 );
}

void UTPTest::asinTest(void)
{
    UTP<double> u = asin(*c);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], -0.6435011087932844);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], 0.3749999999999999 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], 0.447265625        );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -0.4920043945312499);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], -0.0295748710632325);
}

void UTPTest::acosTest(void)
{
    UTP<double> u = acos(*c);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], 2.2142974355881808 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -0.3749999999999999);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], -0.447265625       );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], 0.4920043945312499 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], 0.0295748710632325 );
}

void UTPTest::atanTest(void)
{
    UTP<double> u = atan(*a);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], 0.9151007005533605 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -1.4869888475836428);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], -2.1309821588977478);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -0.0991654691821474);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], 8.450979865456608  );
}

void UTPTest::sinhTest(void)
{
    UTP<double> u = sinh(*a);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], 1.698382437292616   );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -7.883656921306514  );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], 17.5288879589941828 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -26.7264877005184474);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], 31.786095585230548  );
}

void UTPTest::coshTest(void)
{
    UTP<double> u = cosh(*a);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], 1.9709142303266285  );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -6.7935297491704638 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], 19.1640787171982581 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -27.0898634245637986);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], 25.699552207470937  );
}

void UTPTest::tanhTest(void)
{
    UTP<double> u = tanh(*a);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], 0.8617231593133063 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -1.0297327868123762);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], -3.0345119677956367);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -2.1633067957056151);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], 12.7869657967100689);
}

void UTPTest::asinhTest(void)
{
    UTP<double> u = asinh(*a);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], 1.078451058954897  );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -2.4388430433987693);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], -1.1378245425522138);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], 2.657019187559317  );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], 8.6677596073750305 );
}

void UTPTest::acoshTest(void)
{
    UTP<double> u = acosh(*a);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], 7.5643291085695963e-01 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], -4.8154341234307676e+00);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], -1.5737397026574463e+01);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -9.5174865696431766e+01);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], -7.6004910548312284e+02);
}

void UTPTest::atanhTest(void)
{
    UTP<double> u = atanh(*c);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[0], -0.6931471805599453);
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[1], 0.46875            );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[2], 0.4931640625000001 );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[3], -0.7489013671875   );
    CPPUNIT_ASSERT_ALMOST_EQUAL (u[4], 0.1192951202392578 );
}

void UTPTest::fabsTest(void)
{
	(*u) = fabs((*a));
	CPPUNIT_ASSERT_EQUAL ((*u), (*a));
	(*u) = fabs((*b));
	CPPUNIT_ASSERT_EQUAL ((*u), -((*b)));
}

void UTPTest::ceilTest(void)
{
	(*u) = ceil((*a));
	CPPUNIT_ASSERT_ALMOST_EQUAL ((*u)[0], 2.0);
	CPPUNIT_ASSERT_ALMOST_EQUAL ((*u)[1], 0.);
	CPPUNIT_ASSERT_ALMOST_EQUAL ((*u)[2], 0.);
	CPPUNIT_ASSERT_ALMOST_EQUAL ((*u)[3], 0.);
	CPPUNIT_ASSERT_ALMOST_EQUAL ((*u)[4], 0.);
}

void UTPTest::floorTest(void)
{
	(*u) = floor((*b));
	CPPUNIT_ASSERT_ALMOST_EQUAL ((*u)[0], -3.0);
	CPPUNIT_ASSERT_ALMOST_EQUAL ((*u)[1], 0.);
	CPPUNIT_ASSERT_ALMOST_EQUAL ((*u)[2], 0.);
	CPPUNIT_ASSERT_ALMOST_EQUAL ((*u)[3], 0.);
	CPPUNIT_ASSERT_ALMOST_EQUAL ((*u)[4], 0.);
}
